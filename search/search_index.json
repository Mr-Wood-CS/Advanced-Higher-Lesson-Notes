{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Advanced Higher Computing Science","text":""},{"location":"CS/","title":"Computer Systems","text":""},{"location":"CS/01-Data-Rep/","title":"Data Representation","text":""},{"location":"DDD/","title":"Database Design and Development","text":""},{"location":"Revision/","title":"Revision","text":""},{"location":"Revision/1.0-Question-and-Project-Papers/","title":"Past Papers and Projects","text":"<p>Question Papers</p> <p> 2019</p> <p> 2022</p> <p> 2023</p> <p> 2024</p> <p>Project Examples</p> <p> 2019</p> <p> 2022</p>"},{"location":"SDD/","title":"Software Design and Development","text":""},{"location":"SDD/1.0-Analysis-Explanation/","title":"Analysis","text":"<p>For Advanced Higher you are required to be able to explain and use:</p> <ul> <li>Functional Requirements</li> <li>Feasibility Studies </li> <li>User Surveys</li> <li>Project Planning</li> <li>Requirement Specifications</li> <li>Unified Modelling Language (UML)</li> </ul>"},{"location":"SDD/1.2-Functional-Requirements/","title":"Functional Requirements","text":"<p>What you Need to Know</p> <p>Identify the purpose and functional requirements of a problem that relates to the design and implementation at this level in terms of: </p> <ul> <li>inputs </li> <li>processes</li> <li>outputs </li> </ul> <p>Functional requirements are defined in terms of the inputs, processes, and outputs of  a program.</p> <p>This is exactly the same as higher.</p>"},{"location":"SDD/1.3-Feasability-Studies/","title":"Feasability Studies","text":"<p>What you Need to Know</p> <p>Describe, exemplify, and implement research for:</p> <ul> <li>feasibility studies:<ul> <li>economic</li> <li>time</li> <li>legal</li> <li>technical</li> </ul> </li> <li>user surveys</li> </ul>"},{"location":"SDD/1.3-Feasability-Studies/#explanation","title":"Explanation","text":"<p>The creation of a new system can take months (or even years) and cost thousands (or millions!) of pounds. The basic purpose of a feasibility study is to ascertain whether such expenditure of time and money is likely to prove worthwhile and whether the objectives of the problem definition can actually be realised \u2013 what some companies want might be unrealistic and unachievable. </p> <p>A feasibility study should be relatively cheap and quick to carry out. It should be complete in itself and the client does not have to commit to any further expenditure or long-term development by commissioning one \u2013 the client has no legal or contractual obligation to take developments further. </p> <p>Another advantage of a feasibility study is that it can present the client with a range of possibilities from which a choice can be made. </p> <p>Often, several different solutions will be considered in a feasibility study before a recommendation is made. </p> <p>Key Points</p> <ul> <li> <p>The feasibility study should be conducted relatively cheaply and within a fairly short time frame. </p> </li> <li> <p>There are no legal or contractual requirements at this stage.</p> </li> <li> <p>The findings of the feasibility study are presented to the client in the form of a report.</p> </li> <li> <p>This report indicates costs, benefits, alternatives and appropriate recommendations.</p> </li> </ul>"},{"location":"SDD/1.3-Feasability-Studies/#aspects-of-a-feasibility-study","title":"Aspects of a Feasibility Study","text":"<p>There are four aspects of feasibility that must be considered in any feasibility study:</p>"},{"location":"SDD/1.3-Feasability-Studies/#01-economic-feasability","title":"01 - Economic Feasability","text":"<p>This deals with the cost implications involved. Management will want to know how much each option will cost, what is affordable within the company\u2019s budget and what they get for their money. </p> <p>A cost-benefit-analysis is part of the budgetary feasibility study. </p> <p>If the project is not cost-effective then there is no point proceeding. Setting up a new computer system is an investment and involves capital outlay. </p> <p>The costs of a new system include:</p> <ul> <li> <p>the costs of acquiring it in the first place (consultancy fees, program development including cost of any resources required for development, etc.)</p> </li> <li> <p>the costs of installing it (disruption of current operations, cost of new equipment, alteration of workplace, etc.)</p> </li> <li> <p>the costs of maintaining it which also includes training. </p> </li> </ul> <p>In the long term, management will also want to know the \u2018break-even point\u2019 when the new system stops costing money and starts to make money. </p> <p>This is extremely difficult to quantify.</p> <p>However, an accurate estimate of a system\u2019s operational life span is a valid option and will rely solely on the knowledge and experience of the systems analyst involved.</p> <p>Key Points</p> <ul> <li> <p>The client will want to know the cost of each option and what they get for their money.</p> </li> <li> <p>A system is only economically feasible if the benefits of the development outweigh the costs. For this reason a cost benefit analysis is carried out.</p> </li> </ul> <p>Tangible benefits that management would certainly be looking for in the new system would be:</p> <ul> <li>reduced running costs</li> <li>increased operational speed</li> <li>increased throughput of work</li> <li>better reporting facilities</li> </ul> <p>Note that not all the costs and benefits lend themselves to direct measurement. </p> <p>These are called intangible benefits e.g. new systems generally affect the morale of the staff involved, for good or ill. </p>"},{"location":"SDD/1.3-Feasability-Studies/#02-time-feasability","title":"02 - Time Feasability","text":"<p>The time necessary to develop a new information system is considerable. For this reason, the time feasibility must consider not only the time needed to carry out the development but how this will affect the client.</p> <p>Time feasibility must take account of:</p> <ul> <li>overall development time for the project</li> <li>events during the year that the business is already committed to</li> <li>when best to install the new system</li> <li>when is the best time to train users how to use the new system</li> <li>when will the  system be ready for use.</li> </ul> <p>Obviously, time is a main factor in the development of a new system.</p> <p>Questions to be asked at this stage might include:</p> <ul> <li>How long will the proposed system take to develop?</li> <li>Will it be ready within the specified time-frame?</li> <li>When is the best time to install?</li> </ul> <p>For example, a project might have to start within six months; assuming it would take three months to purchase and install the required hardware and software and a further six months to train the end users. </p> <p>Such a project is not technically feasible because of shortage of time so it would not go ahead unless some of the time constraints were reviewed and changed.</p>"},{"location":"SDD/1.3-Feasability-Studies/#03-legal-feasability","title":"03 - Legal Feasability","text":"<p>This has to do with any conflicts that might arise between the proposed system and legal requirements. </p> <p>For example</p> <ul> <li>How would the new system affect contracts and liability?</li> <li>Are health and safety issues in place?</li> <li>Would the system be legal under laws such as GDPR?</li> <li>Would the system be legal under other laws local to the UK or wider jurisdictions where your software may be used or used to store data from inhabitants of those countries e.g. EU or USA?</li> <li>What are the software licensing implications for the new system?</li> </ul> <p>Software licensing can also be quite a thorny problem. </p> <p>Licences can be purchased as:</p> <ul> <li>client licence (per seat), </li> <li>server licence, </li> <li>network licence or site licence and the period of operation may be annual or perpetual</li> </ul> <p>In addition, site licence and the period of operation (annual or perpetual) must also be considered. </p> <p>Software vendors vary in their licensing regulations so this has to be fully investigated.</p>"},{"location":"SDD/1.3-Feasability-Studies/#04-technical-feasability","title":"04 - Technical Feasability","text":"<p>The technical feasibility study must identify the technologies that will be necessary for the proposed system to function correctly. </p> <p>Once identified, the technical feasibility then considers whether or not the technologies necessary are currently available.</p> <ul> <li>If the required technologies are available, the technical feasibility must determine whether or not the client already has the necessary resources. If not, the resources that must be acquired are identified and suitable hardware and software recommended.</li> </ul>"},{"location":"SDD/1.3-Feasability-Studies/#user-survey","title":"User Survey","text":"<p>The users of a particular program are the best people to identify the existing problems with the software and how it could be improved.</p> <p>If the software being developed is new, the target user group should understand the programme. </p> <p>For example, a new library system would be developed following some time spent capturing the experience of existing librarians and how they operate.</p> <p>When the opinion of a number of users is required, it is often easier to create a survey or questionnaire which will capture the information that the project team require.</p> <p>Lesson Task</p> <p>\ud83d\udd8b\ufe0fComplete the task in your Class NoteBook named Functional Requirements.</p>"},{"location":"SDD/1.4-Project-Planning/","title":"Project Planning","text":"<p>What you Need to Know</p> <p>Describe, exemplify, and implement planning in terms of:</p> <ul> <li>Scheduling</li> <li>Resources</li> <li>Gantt charts</li> </ul>"},{"location":"SDD/1.4-Project-Planning/#explanation","title":"Explanation","text":"<p>Project planning involves dividing the project into smaller tasks that are allocated to teams. </p> <p>The project leader must use the available resources in the best possible way to get the job completed successfully and on time. </p> <p>Project management software will organise the project into smaller tasks and then schedule these tasks. The schedule can be displayed as a Gantt Chart.</p> <p>As the project progresses and jobs are completed or delayed, the charts can be updated to show the current position.</p> <p>In this way, the progress of a project can be monitored regularly.</p> <p>A project plan must show:</p> <ul> <li>the individual tasks that must be carried out</li> <li>the time required for each task</li> <li>the sequencing of the tasks to be carried out</li> <li>the resources needed for each task</li> <li>the costs involved in carrying out each task</li> </ul>"},{"location":"SDD/1.4-Project-Planning/#scheduling","title":"Scheduling","text":"<p>The role of project manager is to use his/her skills to turn the project requirements specification into a work breakdown structure and then to estimate the amount of effort required to complete each task.</p> <p>These tasks can then be allocated as items of work to be completed by individuals and/or teams. </p> <p>A work breakdown structure represents the hierarchy of tasks to be completed and the milestones within the project. </p> <p>A milestone is a specific point in the project timeline which has some level of importance. It will be a point at which the project progress is evaluated and reported to the client. </p> <p>It can also be a point where the client will be given a deliverable; where the client will receive some of the output from the project work.</p> <p>When the tasks within the milestone are completed then the milestone is achieved.</p>"},{"location":"SDD/1.4-Project-Planning/#resources","title":"Resources","text":"<p>Projects require resources in order to be completed. </p> <p>A significant amount of the resource required to complete a project will be the members of the project team. </p> <p>There will also be other resources that may be required to complete the project: specialist hardware/software, external consultants/designers, legal and other professionals.</p>"},{"location":"SDD/1.4-Project-Planning/#gantt-charts","title":"Gantt Charts","text":"<p>A Gantt chart is a way of showing the work breakdown schedule against a timeline.</p> <p>The timeline is used to show:</p> <ul> <li>when the activity to complete tasks begins and ends,</li> <li>how long each activity is scheduled to last,</li> <li>where activities overlap with each other and</li> <li>the start and end dates for the whole project.</li> </ul> <p>Gantt charts can also be used to show the dependencies between tasks on the timeline.</p>"},{"location":"SDD/1.5-Requirement-Specification/","title":"Requirement Specification","text":""},{"location":"SDD/1.5-Requirement-Specification/#explanation","title":"Explanation","text":"<p>All the information acquired up to this point is contained within the Requirement Specification which is produced for the client.</p> <p>The requirements specification contains:</p> <ul> <li>Functional Requirements</li> <li>End-User Requirements</li> <li>Scope, Boundaries &amp; Constraints</li> </ul> <p>Producing the requirement spec is an iterative process between the client and the consultants as both sides must agree on what is to be produced.</p> <p>It is a legal binding document and protects both parties:</p> <ul> <li>The client knows what they are paying for and the consultants must deliver this.</li> <li>The consultants know what they have to develop and stops the client from changing their minds</li> </ul> <p>The requirements specification is used for validation throughout the process.</p> <ul> <li>The consultants use it to make sure that what they are producing is correct.</li> <li>The client use it at beta testing to ensure that what they have is what they asked for.</li> </ul>"},{"location":"SDD/1.5-Requirement-Specification/#requirement-specification-breakdown","title":"Requirement Specification Breakdown","text":"Functional RequirementsScopeBoundariesConstraints <p>The functional requirements (inputs, processes and outputs) should be written in such a way that the end-user can understand them clearly and unambiguously, but also so that the programmers know what they have to produce.</p> <p>The scope is a list of the deliverables that the project will and over to the client and/or end-user.</p> <p>E.g. design, completed program, test plan, test results and evaluation report.</p> <p>This hasn\u2019t changed from higher</p> <p>The boundaries are the limits that help to define what is in the project and what is not.  It can also clarify any assumptions made by the software developers regarding the clients requirements.</p> <p>This hasn\u2019t changed from higher.</p> <p>Technical constraints</p> <ul> <li>knowledge and/or availability of development tools and programming language</li> <li>the operating system or platforms that will be used to deliver the working solution</li> <li>hardware considerations such as capacity</li> <li>non-functional requirements such as performance considerations</li> </ul> <p>Business constraints:</p> <ul> <li>schedule and timescales that must be met</li> <li>available budget</li> <li>composition and makeup of the development team</li> <li>software licensing restrictions or requirements</li> </ul> <p>Further constraints:</p> <ul> <li>economic considerations</li> <li>political issues</li> </ul>"},{"location":"SDD/1.5-Requirement-Specification/#worked-example","title":"Worked Example","text":"<p>The purpose of a program is to allow the end user to search for an item on an unsorted list of data. </p> <p>If a match is found, the program will display the row of data (item id, price and number in stock) for the item.</p> Functional RequirementsScopeBoundariesEnd User RequirementsConstraints <p>Inputs</p> <ul> <li>itemID</li> <li>price</li> <li>quantity in stock</li> </ul> <p>Processes</p> <ul> <li>read in data from an external file to a 2D array</li> <li>sort the data in order of itemID from low to high</li> <li>search the 2D array for the required itemID, based on the end-user input</li> </ul> <p>Output</p> <ul> <li>if a match is found, the data (itemID, price, and number in stock) will correspond to the end-user input</li> <li>if no match is found, a suitable message will inform the end user</li> </ul> <p> There is the assumption that the data is being input from an external file, this is why it the price and quantity are part of input.</p> <p>There is slso an assumption that a binary search is being used which is why the data is sorted first.</p> <p>This development involves creating a modular program. The deliverables include:</p> <ul> <li>a detailed design of the program structure</li> <li>a test plan with a completed test data table</li> <li>a working program</li> <li>the results of testing</li> <li>an evaluation report</li> </ul> <p>The boundaries of the program are:</p> <ul> <li>the program will read the data (itemID, price, and number in stock) from a sequential file</li> <li>the data is accurate, there is no need to implement input validation</li> </ul> <p>End users will expect:</p> <ul> <li>to enter an itemID while the program is running</li> <li>the data corresponding to the itemID to be displayed</li> <li>a user interface that is clearly labelled and easy to use for all user types</li> </ul> <p>The constraints that apply to this development are:</p> <ul> <li>Python or Visual Basic must be used to develop the program.</li> <li>The working program will run on the Windows operating system.</li> <li>The work must be completed within 8 hours.</li> </ul>"},{"location":"SDD/3.0-Design-Explanation/","title":"Design","text":""},{"location":"SDD/3.0-Design-Explanation/#program-design","title":"Program Design","text":""},{"location":"SDD/3.0-Design-Explanation/#structure-diagrams","title":"Structure Diagrams","text":""},{"location":"SDD/3.0-Design-Explanation/#flowcharts","title":"Flowcharts","text":""},{"location":"SDD/3.0-Design-Explanation/#pseudocode","title":"Pseudocode","text":""},{"location":"SDD/4.0-Software-Implementation-Explanantion/","title":"Software Implementation","text":""},{"location":"SDD/4.1-Parallel-1D-Arrays/","title":"Parrllel 1D Arrays","text":"<p>What you need to Know</p> <p>You must be able to describe, exemplify and implement parallel 1D arrays.</p>"},{"location":"SDD/4.1-Parallel-1D-Arrays/#explanation","title":"Explanation","text":"<p>You already know that an array is a list of related values, called elements, that can be referred to by number, e.g. temperature[0], temperature[5] etc. </p> <p>This example below now adds a second array that records the date on which the temperature was taken.</p> <p>We can look up the temperature on the 8th of June, by looking for that date, and reading the corresponding temperature (14\u00b0). </p> <p>These are parallel arrays, because we can look up corresponding values, like a table.</p> <p>In this example, pupil marks are stored in one array, and pupil names are stored in another. </p> <p>We can see that Jack scored 23, and Lucy scored 24, by looking at the two arrays side-by-side, as if they were a table.</p> <p>There is no special syntax or different way to write these.</p> <p>We just declare two arrays.</p> <p>Example</p> <pre><code>          # Two *parallel* arrays of pupil names and marks\n          pupil_name = [\"Peter\", \"Laura\", \"Marie\"]\n          pupil_mark = [20, 21, 23]\n\n          # If we want to find the name and mark of the third pupil in the list, we would say:\n          print(pupil_name[2])\n          print(pupil_mark[2])\n</code></pre>"},{"location":"SDD/4.1-Parallel-1D-Arrays/#working-with-files","title":"Working with Files","text":"<p>This example is based on the Schools-Reg.csv file from earlier</p> <p>We would implement this program with three parallel arrays - one for name, age and reg group.</p> <p>This program reads the Schools.csv file, and produces an array of lines - each line of the file. </p> <p>We then split each line into parts (comma separated values), e.g.:</p> <p>Example</p> <pre><code>    import csv\n\n    # Open the file for reading\n    file = open(\"School-Reg.csv\", \"r\")\n\n    # Assign Parallel arrays for school reg data\n    name = [str] * 3\n    age = [int] * 3\n    regGroup = [str] * 3\n\n    # Loop through the array of lines\n    for line in range(0, 3):\n        data = file.readline()\n        # Strip characters that are not required\n        data = data.strip(\"\\n\")\n        # Split the data on the comma\n        data = data.split(\",\")\n\n       # Store the 'data' in the parallel arrays\n        name[line] = data[0]\n        age[line] = data[1]\n        regGroup[line] = data[2]\n\n    # Display the arrays\n    for i in range (0,3):\n      print(\"Name: \" + name[i] + \" Age: \" + str(age[i]) + \" Reg: \" + regGroup[i])\n\n    # Close the file\n    file.close()\n</code></pre>"},{"location":"SDD/4.2-Working-with-Records/","title":"Working with Records","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement records </p>"},{"location":"SDD/4.2-Working-with-Records/#explanation","title":"Explanation","text":"<p>So far, we\u2019ve used only one type of data structure to store multiple values: the array. </p> <p>Remember, an array is like a list of related variables that all share the same data type. For example, an array could store a list of numbers or a list of names, but not both.</p> <p>While arrays can only hold one type of data, records allow us to store different types of data together in a single structure. For example, one record can store a name (string), an age (integer), and a status (Boolean) all in one place.</p> <p>Just like in a database, records help us organize related information more efficiently.</p> <p>By using records, we can keep all related data about a single person or object together in one structure, and we can use real-world names for each category (called fields) to make the data easier to understand and manage. </p> <p>This is especially useful because most systems we work with, like databases, organize data in this way.</p>"},{"location":"SDD/4.2-Working-with-Records/#record-structures","title":"Record Structures","text":"<p>A record structure is like creating your own custom data type. </p> <p>As a programmer, you define a record with a name that represents something real, like \"Student\" or \"Product\" and specify different categories (fields) for storing information. </p> <p>Each field has a name and a specific data type (e.g., string, integer, Boolean), so the program knows how to store and handle each piece of data. </p> <p>This way, when the program creates actual records, it knows exactly what kind of information to expect in each field.</p>"},{"location":"SDD/4.2-Working-with-Records/#creating-a-single-record-structure","title":"Creating a Single Record Structure","text":""},{"location":"SDD/4.2-Working-with-Records/#part-one","title":"Part One","text":"PythonExplanation <pre><code>from dataclasses import dataclass\n\n@dataclass\n</code></pre> <p>Line 1 - from dataclasses import Dataclass This line is like getting a special helper from a toolbox. It brings in something called dataclass, which makes it easier to create a class that stores information.</p> <p>Line 3 - @dataclass This is a special tag that tells Python, \"I want to make the next class a dataclass.\" This means Python will automatically help us with things like creating the class and keeping track of data inside it.</p>"},{"location":"SDD/4.2-Working-with-Records/#part-two","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n</code></pre> <p>Line 5 - class SchoolReg Here, we are creating a class called SchoolReg. A class is like a blueprint or recipe. In this case, it helps us create something to store information about a school registration, like a student's name, age, and registration number.</p> <p>Line 6 - Name: str = \"\" Inside the class, we create a variable called Name. This will hold the student's name, and it's a string, which means it's a word or group of letters (like \"Peter\"). The empty quotes \" \" mean that we are starting with no name yet.</p> <p>Line 7 - Age: int = 0 This is another variable called Age. It will hold the student's age, and it's an integer (which means a whole number like 17). Right now, we start it at 0.</p> <p>Line 8 - Reg: str = \"\" This variable is called Reg, which stands for \"registration number.\" It\u2019s also a string (a group of letters or numbers). At first, it's an empty string \"\", but we will fill it in later.</p>"},{"location":"SDD/4.2-Working-with-Records/#part-three","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = SchoolReg()\n    pupilRecord.Name = \"Peter\"\n    pupilRecord.Age = 17\n    pupilRecord.Reg = \"r1\"\n</code></pre> <p>Line 10 -  pupilRecord = SchoolReg() Now we create an object called pupilRecord from the SchoolReg class. Think of the class as a cookie cutter, and this object is a cookie made from it. This object will store a student's name, age, and registration number.</p> <p>Line 11 - pupilRecord.Name = \"Peter\" Here, we set the Name of the pupilRecord object to \"Peter\". Before it was empty (\"\"), but now it's filled with the name \"Peter\".</p> <p>Line 12 - pupilRecord.Age = 17 Next, we set the Age for pupilRecord to 17. Before, it was 0, but now we know Peter is 17 years old.</p> <p>__Line 13 - pupilRecord.Reg = \"r1\"_ Here, we set the registration number (Reg) to \"r1\". Now, the student Peter has a registration number \"r1\".</p>"},{"location":"SDD/4.2-Working-with-Records/#part-four","title":"Part Four","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = SchoolReg()\n    pupilRecord.Name = \"Peter\"\n    pupilRecord.Age = 17\n    pupilRecord.Reg = \"r1\"\n\n    print (pupilRecord.Name) \n    print (pupilRecord.Age) \n    print (pupilRecord.Reg) \n</code></pre> <p>Line 15 - print(pupilRecord.Name) This line tells the computer to print (show) the name of the student, which is \"Peter\". The computer will display \"Peter\" on the screen.</p> <p>Line 16 - print(pupilRecord.Age) This prints the student's age, which is 17. The computer will show 17 on the screen.</p> <p>Line 17 - print(pupilRecord.Reg) Finally, this prints the student's registration number, which is \"r1\". The computer will show \"r1\".</p>"},{"location":"SDD/4.3-Arrays-of-Records/","title":"Working with Records","text":"<p>What you need to know</p> <p>You must be able to describe, exemplify and implement arrays of records </p>"},{"location":"SDD/4.3-Arrays-of-Records/#explanation","title":"Explanation","text":"<p>In Python, an array of records is like a list of boxes, where each box holds important information about a person, place, or thing. </p> <p>Each \"box\" (record) has labelled parts for details, like a name, age, or ID number. </p> <p>For example, if we have three students, we can store their name, age, and registration number in three separate boxes.</p> <p>These boxes are part of a record, and we can easily look inside each one to see or change the details. </p>"},{"location":"SDD/4.3-Arrays-of-Records/#array-of-records-in-python-basic-method","title":"Array of Records in Python (basic method)","text":""},{"location":"SDD/4.3-Arrays-of-Records/#part-one","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n</code></pre> <p>Info</p> <p>Lines 1 - 8 are covered in Working with Records.</p> <p>Line 10 - pupilRecord = [SchoolReg() for x in range(0,3)] This line creates a list called pupilRecord. A list is like a box where we can store many things. In this case, we are creating two empty student records because the range (0,3) means it will create three spots, one for pupilRecord[0], one for pupilRecord[1] and one for pupilRecord[2].</p> <p>In short, this line says:</p> <p>\"Make 3 empty student records using the SchoolReg class.\"</p>"},{"location":"SDD/4.3-Arrays-of-Records/#part-two","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    pupilRecord[0].Name = \"Peter\"\n    pupilRecord[0].Age = 17\n    pupilRecord[0].Reg = \"r1\"\n</code></pre> <p>Line 12 - pupilRecord[0].Name = \"Peter\" Here, we set the Name of the first student (pupilRecord[0]) to \"Peter\". Before, it was empty, but now it holds the name \"Peter.\"</p> <p>Line 13 - pupilRecord[0].Age = 17 Next, we set the Age of the first student (pupilRecord[0]) to 17. Before it was 0, and now it\u2019s set to 17 years old.</p> <p>Line 14 - pupilRecord[0].Reg = \"r1\" Here, we set the registration number (Reg) for the first student to \"r1\". Now Peter has the registration number \"r1\".</p>"},{"location":"SDD/4.3-Arrays-of-Records/#part-three","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    pupilRecord[0].Name = \"Peter\"\n    pupilRecord[0].Age = 17\n    pupilRecord[0].Reg = \"r1\"\n\n    print (pupilRecord[0].Name) \n    print (pupilRecord[0].Age) \n    print (pupilRecord[0].Reg) \n</code></pre> <p>Line 16 - print(pupilRecord[0].Name) This line tells the computer to print the name of the first student in the list, which is Peter.</p> <p>Line 17 - print(pupilRecord[0].Age) This prints the age of the first student in the list, which is 17. </p> <p>Line 18 - print(pupilRecord[0].Reg) Finally, this prints the registration number of the first student, which is \"r1\".</p>"},{"location":"SDD/4.3-Arrays-of-Records/#array-of-records-efficient-method","title":"Array of Records (efficient method)","text":""},{"location":"SDD/4.3-Arrays-of-Records/#part-one_1","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    for x in range(len(pupilRecord)):\n       pupilRecord[x].Name = str(input(\"Enter Name: \"))\n       pupilRecord[x].Age = int(input(\"Enter Age: \"))\n       pupilRecord[x].Reg = str(input(\"Enter Reg: \"))\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n</code></pre> <p>Info</p> <p>Lines 1 - 8 are covered in Working with Records.</p> <p>Line 12 - for x in range(len(pupilRecord)): The range(len(pupilRecord)) makes the loop go through each student one at a time (three students in this case).</p> <p>Line 13 - pupilRecord[x].Name = str(input(\"Enter Name: \")) This line asks the user to type a name for each student using the input() function. Whatever the user types in is stored in the Name variable for each student in the list. For example, the first time the loop runs, it asks for the name of pupilRecord[0].</p> <p>Line 14 - pupilRecord[x].Age = int(input(\"Enter Age: \")) This line asks the user to type the student's age. The input() function is used again, and the number typed is stored as the student's age. It\u2019s converted into an integer (whole number). For example, the first time, it will store the age for pupilRecord[0].</p> <p>Line 15 - pupilRecord[x].Reg = str(input(\"Enter Reg: \")) This line asks the user to type the student's registration number. The registration number is stored as a string (letters and numbers) for each student. For example, the first time, it stores the registration number for pupilRecord[0].</p>"},{"location":"SDD/4.3-Arrays-of-Records/#part-two_1","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    for x in range(len(pupilRecord)):\n       pupilRecord[x].Name = str(input(\"Enter Name: \"))\n       pupilRecord[x].Age = int(input(\"Enter Age: \"))\n       pupilRecord[x].Reg = str(input(\"Enter Reg: \"))\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n</code></pre> <p>Line 17 - pupilRecord = [SchoolReg() for x in range(0,3)] This is another loop that goes through each student record in the pupilRecord list only this time it\u2019s going to print the details of every student one at a time.</p> <p>Line 18 - print(\"Name: \", pupilRecord[x].Name, \"Age: \", pupilRecord[x].Age, \"Reg: \", pupilRecord[x].Reg) This line prints out the name, age, and registration number for each student in the list.</p> <p>Example</p> <pre><code>    Name: Peter Age: 17 Reg: r1\n</code></pre>"},{"location":"SDD/4.3-Arrays-of-Records/#array-of-records-with-files","title":"Array of Records (with Files)","text":""},{"location":"SDD/4.3-Arrays-of-Records/#part-one_2","title":"Part One","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n</code></pre> <p>Info</p> <p>Lines 1 - 10 are covered in Working with Records.</p> <p>Line 12 - file = open(\"School-Reg.csv\", \"r\") This line opens a file called \"School-Reg.csv\" in read mode so that we can read from it.</p>"},{"location":"SDD/4.3-Arrays-of-Records/#part-two_2","title":"Part Two","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n\n    for i in range(len(pupilRecord)):\n        data = file.readline()\n        data = data.strip(\"\\n\")\n        data = data.split(\",\")\n        pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2])\n</code></pre> <p>Line 14 A loop that will go through each of the three student records in the pupilRecord list one by one.</p> <p>Line 15 - data = file.readline() This line reads one line of data from the file. Each time the loop runs, it reads the next line from the file.</p> <p>Line 16 - data = data.strip(\"\\n\") This removes the newline character (\\n), which is an invisible character at the end of each line in a file. It's like cleaning up the data so there are no extra spaces or jumps to the next line.</p> <p>Line 17 - data = data.split(\",\") This splits the line of data at each comma. Since it's a CSV file, the data for each student is separated by commas. After splitting, we get a list of pieces of information, like the student's name, age, and registration number.</p> <p>For example, if the line was \"Peter,17,r1\", after splitting it, we would get:</p> <pre><code>``` text\n    data[0] = \"Peter\"\n    data[1] = \"17\"\n    data[2] = \"r1\"\n```\n</code></pre> <p>Line 19 - pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2]) This line takes the pieces of data from the file and creates a SchoolReg object for each student. It fills in the student's name (data[0]), age (data[1]), and registration number (data[2]). The int() function converts the age from a string to a number.</p>"},{"location":"SDD/4.3-Arrays-of-Records/#part-three_1","title":"Part Three","text":"PythonExplanation <pre><code>    from dataclasses import dataclass\n    import CSV\n\n    @dataclass\n\n    class SchoolReg:\n        Name : str = \"\"\n        Age : int = 0\n        Reg : str = \"\"\n\n    pupilRecord = [SchoolReg() for x in range (0,3)]\n\n    file = open(\"School-Reg.csv\", \"r\")\n\n    for i in range(len(pupilRecord)):\n        data = file.readline()\n        data = data.strip(\"\\n\")\n        data = data.split(\",\")\n        pupilRecord[i] = SchoolReg(data[0], int(data[1]), data[2])\n\n    for x in range(len(pupilRecord)):\n        print (\"Name: \" , pupilRecord[x].Name , \"Age: \" , pupilRecord[x].Age , \"Reg: \" , pupilRecord[x].Reg )\n\n    file.close()\n</code></pre> <p>Line 21 - for x in range(len(pupilRecord)): This is another loop. This time, it goes through each student's record in the list and prints out their information.</p> <p>Line 22 - print(\"Name: \", pupilRecord[x].Name, \"Age: \", pupilRecord[x].Age, \"Reg: \", pupilRecord[x].Reg) This line prints out the student's name, age, and registration number. </p> <p>Line 23 - file.close() This line closes the file after we are finished reading from it.</p>"},{"location":"SDD/4.4-2d-Arrays/","title":"2d Arrays","text":""},{"location":"SDD/4.4-2d-Arrays/#explanation","title":"Explanation","text":"<p>A 2D array is like a table or grid, made up of rows and columns. Each position in a 2D array can hold a value, much like how a cell in a spreadsheet works. </p> <p>This allows us to store and work with data efficiently.</p> <p>Example </p> <p>Imagine a chessboard, which has 8 rows and 8 columns. </p> <p>Each square on the board can hold a piece (like a pawn or bishop), and each piece can be positioned at a specific spot determined by its row and column number.</p> <p>Row 1, Column 1 might hold a white rook.</p> <p>Row 2, Column 3 might hold a black knight.</p> <p>This is exactly how a 2D array works! </p> <p>Each cell can be accessed using two indices: one for the row and one for the column.</p>"},{"location":"SDD/4.4-2d-Arrays/#how-does-it-work","title":"How Does it Work?","text":"<p>Imagine a classroom with 12 pupils who sit in 3 rows of desks with 4 columns. </p> <p>You could create an array for each row:</p> <p><pre><code>row1 = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\nrow2 = [\"Eve\", \"Frank\", \"Grace\", \"Hannah\"]\nrow3 = [\"Ian\", \"Jack\", \"Katie\", \"Liam\"]\n</code></pre> However, this is not always efficiant.</p> <p>Using a 2d array would allow each classroom to store their seating plan in one array:</p> <pre><code>classroom1 = [\n\n        [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n        [\"Eve\", \"Frank\", \"Grace\", \"Hannah\"],\n        [\"Ian\", \"Jack\", \"Katie\",\"Liam\"]\n\n        ]\n</code></pre>"},{"location":"SDD/4.4-2d-Arrays/#accessing-elements","title":"Accessing Elements","text":"<p>To find a specific student's name, we use row and column indexes (counting starts at 0!):</p> <pre><code>print(students[1][2])  # Output: Grace\n</code></pre>"},{"location":"SDD/4.4-2d-Arrays/#changing-values","title":"Changing Values","text":"<p><pre><code>students[2][3] = \"Lucas\"\nprint(students[2][3])  # Output: Lucas\n</code></pre> Now, <code>Liam</code> has been replaced with <code>Lucas</code>.</p>"},{"location":"SDD/4.4-2d-Arrays/#looping-through-a-2d-array","title":"Looping Through a 2D Array","text":"<p>We can use loops to go through each row and column:</p> <pre><code>for row in students:\n    for name in row:\n        print(name, end=\" \")  # Prints all names in a single line\n</code></pre>"},{"location":"SDD/4.4-2d-Arrays/#appending-to-a-2d-array","title":"Appending to a 2D Array","text":""},{"location":"SDD/4.4-2d-Arrays/#adding-a-new-row","title":"Adding a New Row","text":"<p>To add a new row to a 2D array, use <code>.append()</code>:</p> <pre><code>classroom1 = [\n\n        [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n        [\"Eve\", \"Frank\", \"Grace\", \"Hannah\"],\n        [\"Ian\", \"Jack\", \"Katie\",\"Liam\"]\n\n        ]\n\nclassroom1.append([\"Paul\", \"Claire\",\" Shaun\"])\n</code></pre>"},{"location":"SDD/4.4-2d-Arrays/#adding-a-new-empty-column-to-each-row","title":"Adding a New (empty) Column, to Each Row","text":"<pre><code>classroom1 = [\n\n        [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n        [\"Eve\", \"Frank\", \"Grace\", \"Hannah\"],\n        [\"Ian\", \"Jack\", \"Katie\",\"Liam\"]\n\n        ]\n\n# Adding a new column (adding \"Grace\" and \"Hannah\" to each row)\nfor row in classroom1:\n    row.append(\" \")  # You can change this value for each row\n\nprint(classroom1)\n</code></pre>"},{"location":"SDD/4.5-Binary-Search/","title":"Binary Searching","text":"<p>What you need to Know</p> <p>Describe, exemplify, and implement binary search</p> <p>Read and explain code that uses constructs appropriate to this level.</p>"},{"location":"SDD/4.5-Binary-Search/#explanantion","title":"Explanantion","text":"<p>A binary search finds a value by continually halving a sorted list until a target is, or is not, found.</p> <p>The code begins by designating a start (S) point and an end (E) point in the list. These are initially the first and last elements of the array.</p> <p>From these, the target value positioned in the middle of the sorted list is identified\":</p> <p>( M=(E-S)/2 ).</p> <p>image to be added</p> <p>The algorithm compares the target to the value stored at M and makes one of three decisions:</p> <ol> <li> <p>If the middle value is larger than the target, then the target must be in the half of the list that contains smaller values.</p> </li> <li> <p>If the middle value is smaller, the target must be in the larger half of the list.</p> </li> <li> <p>If the middle value is equal to the target, then the position of the target has been identified and the search ends.</p> </li> </ol> <p>If either bullet points 1 or 2 are true, then the start or end are reassigned as required. </p> <p>The middle point is then calculated for the remaining list and the same decision is made again.</p> <p>image to be added</p> <p>This is carried out again, until a match is found at M.</p> <p>image to be added</p>"},{"location":"SDD/4.5-Binary-Search/#binary-search-of-sorted-integers","title":"Binary Search of Sorted Integers","text":"PythonExplanation <pre><code>numbers = [1, 2, 3, 4, 5, 6, 7]\n\ndef binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n\n    while left &lt;= right:\n        middle = (left + right) // 2  # Find the middle index\n\n        middle_value = array[middle]  # Get the name at the middle index\n\n        if middle_value == target:\n            return f\"{target} found at index {middle}!\"\n        elif target &lt; middle_value:\n            right = middle - 1  # Focus on the left half\n        else:\n            left = middle + 1  # Focus on the right half\n\n    return f\"{target} is not in the list.\"\n\nprint(binary_search(numbers, 7))\n</code></pre> <code>Line 1</code> Implement the array of integers (sorted)    <code>Line 3</code> The lowest index point (S) is stored <code>Line 3</code>"},{"location":"SDD/4.5-Binary-Search/#binary-search-of-sorted-strings","title":"Binary Search of Sorted Strings","text":"PythonExplanation <pre><code>names = [\"Alice\", \"Charlie\", \"Emma\", \"Jack\", \"Olivia\", \"Sophia\", \"Zach\"]\n\ndef binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n\n    while left &lt;= right:\n        middle = (left + right) // 2  # Find the middle index\n\n        middle_value = array[middle]  # Get the name at the middle index\n\n        if middle_value == target:\n            return f\"{target} found at index {middle}!\"\n        elif target &lt; middle_value:\n            right = middle - 1  # Focus on the left half\n        else:\n            left = middle + 1  # Focus on the right half\n\n    return f\"{target} is not in the list.\"\n\nprint(binary_search(names, \"Olivia\"))\n</code></pre> <code>Line 3 - Define the Function</code> <p>This line starts the definition of a function called insertion_sort that takes one argument, arr, which will be a list of numbers we want to sort.</p> <p>This function takes two inputs:     - <code>array</code>: The sorted list of names to search.     - <code>target</code>: The name we\u2019re searching for.</p> <code>Line 4 - Set the Starting Points</code> <p>left points to the first index of the list.</p> <code>Line 5 - Set the End Point</code> <p>right points to the last index of the list.</p> <code>Line 7 - Loop Until the Pointers Meet</code> <p>The loop continues as long as <code>left</code> is less than or equal to <code>right</code>. If <code>left</code> goes beyond <code>right</code>, the target is not in the list.</p> <code>Line 8 - Find the Middle</code> <p><code>middle</code> calculates the middle index of the current range.</p> <p><code>middle_value</code> retrieves the name at that index.</p> <code>Line 12 - Check if Middle Matches the Target</code> <p>If the middle name matches the target, the search is complete, and the function returns the result.</p> <code>Line 14 - Check if the Target is Smaller</code> <p>If the target name is alphabetically smaller than the middle name, the search continues in the left half of the list.</p> <code>Line 16 - Check if the Target is Larger</code> <p>If the target name is larger, the search continues in the right half of the list.</p> <code>Line 19 - Return if Not Found</code> <p>If the loop ends without finding the target, the function returns a message indicating the name is not in the list.   </p>"},{"location":"SDD/4.5-Binary-Search/#binary-search-2d-arrays","title":"Binary Search 2D Arrays","text":"PythonExplanation <pre><code># Step 1: Define a function for binary search on a 2D array\ndef binary_search_2d(array, target):\n\"\"\"\nThis function searches for a target number in a 2D array using binary search.\nThe array should be sorted row-wise and column-wise.\n\"\"\"\n\n# Step 2: Start from the top-right corner of the array\nrow = 0  # Start at the first row\ncol = len(array[0]) - 1  # Start at the last column\n\n# Step 3: Keep searching until we either find the number or run out of bounds\nwhile row &lt; len(array) and col &gt;= 0:\n    # Check the current number\n    current = array[row][col]\n\n    # If it's the target, return its position\n    if current == target:\n        return (row, col)\n\n    # If the current number is larger, move left (to a smaller number)\n    elif current &gt; target:\n        col -= 1\n\n    # If the current number is smaller, move down (to a larger number)\n    else:\n        row += 1\n\n# If we reach here, the target is not in the array\nreturn None\n\n# Step 4: Create a sorted 2D array to test\nmatrix = [ [1, 4, 7, 11] , [2, 5, 8, 12] , [3, 6, 9, 16] , [10, 13, 14, 17]]\n\n# Step 5: Call the function and print the result\ntarget = 9\nresult = binary_search_2d(matrix, target)\nprint(f\"The target {target} is at position: {result}\")\n</code></pre> <code>Line 3 -</code> <code>Line 4 -</code> <code>Line 5 -</code> <code>Line 7 -</code> <code>Line 8 -</code> <code>Line 12 -</code> <code>Line 14 -</code> <code>Line 16 -</code> <code>Line 19 -</code>"},{"location":"SDD/4.5-Binary-Search/#binary-search-unsorted-2d-arrays","title":"Binary Search Unsorted 2D Arrays","text":"PythonExplanation <pre><code># Step 1: Create an unsorted 2D array\nunsorted_array = [\n    [5, 12, 7],\n    [3, 9, 1],\n    [8, 6, 2]\n    ]\n\n# Explanation: This is the unsorted 2D array. Each row has numbers in no particular order.\n\n# Step 2: Flatten the 2D array into a single list\nflat_array = [num for row in unsorted_array for num in row]\n\n# Explanation: We take all the numbers from the 2D array and put them into a single list.\n# Now `flat_array` is: [5, 12, 7, 3, 9, 1, 8, 6, 2]\n\n# Step 3: Sort the list\nflat_array.sort()\n\n# Explanation: Sorting arranges the numbers from smallest to largest.\n# Now `flat_array` is: [1, 2, 3, 5, 6, 7, 8, 9, 12]\n\n# Step 4: Define a function for binary search\ndef binary_search(array, target):\nlow = 0\nhigh = len(array) - 1\n\n# Explanation: `low` is the start of the list, and `high` is the end.\n\nwhile low &lt;= high:\nmid = (low + high) // 2\n# Explanation: `mid` is the middle index of the current part of the list.\n\nif array[mid] == target:\n    return mid\n# Explanation: If the number at `mid` is what we're looking for, return its index.\n\nelif array[mid] &lt; target:\n    low = mid + 1\n# Explanation: If the number at `mid` is too small, search the right half.\n\nelse:\n    high = mid - 1\n# Explanation: If the number at `mid` is too big, search the left half.\n\nreturn -1\n# Explanation: If we finish the loop without finding the number, return -1 (not found).\n\n# Step 5: Search for a number\ntarget = 7\nindex = binary_search(flat_array, target)\n\n# Explanation: Let's look for the number 7 in the sorted list.\n\n# Step 6: Print the result\nif index != -1:\n    print(f\"Found {target} at index {index} in the sorted array.\")\nelse:\n    print(f\"{target} is not in the array.\")\n\n# Explanation: If the number is found, it tells us where it is. If not, it says so.\n</code></pre> <code>Line 3 -</code> <code>Line 4 -</code> <code>Line 5 -</code> <code>Line 7 -</code> <code>Line 8 -</code> <code>Line 12 -</code> <code>Line 14 -</code> <code>Line 16 -</code> <code>Line 19 -</code>"},{"location":"SDD/4.6-Insertation-Sorts/","title":"Insertion Sort","text":"<p>What you need to Know</p> <p>Describe, exemplify, and implement insertation sorts</p> <p>Read and explain code that uses constructs appropriate to this level.</p>"},{"location":"SDD/4.6-Insertation-Sorts/#explanantion","title":"Explanantion","text":"<p>An insertion sort traverses an array from the second element to the last. </p> <p>Each element is compared to the elements before in turn, working backwards down the list.  Values are swapped until the element being compared is placed in order</p> <p>Consider the following  array</p>"},{"location":"SDD/4.6-Insertation-Sorts/#insertion-sort-iteration-1","title":"Insertion Sort - Iteration 1","text":"<p>Start with element 1 of the list to be sorted.  This value is temporarily stored.</p> <p>If the temp value is smaller than the value before it (element 0), then the value before it, is copied to the right (element 1).</p> <p>Each value, to the left of the element (where the temp value was originally stored) is compared until :</p> <ul> <li> <p>The value being compared is smaller that the stored temp value or </p> </li> <li> <p>the start of the list has been reached</p> </li> </ul> <p>When either of the above is true, the temp value is copied back into the list at the previous position.</p>"},{"location":"SDD/4.6-Insertation-Sorts/#insertion-sort-iteration-2","title":"Insertion Sort - Iteration 2","text":"<p>The next value (99) is copied into the temp.</p> <p>When the next value (99) is examined, the value before it (45) is smaller, so no further action is required</p>"},{"location":"SDD/4.6-Insertation-Sorts/#insertion-sort-iteration-3","title":"Insertion Sort - Iteration 3","text":"<p>The next value (7) is copied into the temp.</p> <p>When the temp value (7) is compared with element 2 (99) , it is smaller so 99 is copied into element 3</p> <p>When the temp value (7) is compared with element 1 (45), it is smaller so 45 is copied into element 2</p>"},{"location":"SDD/4.6-Insertation-Sorts/#insertion-sort-1d-arrays","title":"Insertion Sort (1D Arrays)","text":"PythonExplanation <pre><code>numbers = [7, 2, 5, 3, 4]\n\nfor i in range(1, len(arr)):\n\ncurrent_number = arr[i]\n\nj = i - 1\n\nwhile j &gt;= 0 and arr[j] &gt; current_number:\n\n    arr[j + 1] = arr[j]\n\n    j -= 1\n\n    arr[j + 1] = current_number\n\nprint(\"Sorted Numbers:\")\n\nprint(numbers)\n</code></pre> <code>Line 1</code> This line starts the definition of a function called insertion_sort that takes one argument, arr, which will be a list of numbers we want to sort. <code>Line 3</code> <p>This loop goes through each item in the list, starting from the second item (i = 1). We don\u2019t need to start from the first item because, by itself, it\u2019s already \"sorted.\"</p> <p>current_number = arr[i]</p> <p>Here, we store the value of the current item in the list (the one we want to sort into the right place) in a variable called current_number.</p> <p>j = i - 1</p> <p>We set j to be the index of the item right before current_number. This helps us compare the current_number to the items that are already sorted.</p> <p>while j &gt;= 0 and arr[j] &gt; current_number:</p> <p>This line starts a loop. It checks if j is still within the list (not less than 0) and if the item at j is bigger than current_number. If both are true, we move the item at j one position to the right. This loop makes space for current_number to be in the right spot.</p> <p>arr[j + 1] = arr[j]</p> <p>Inside the while loop, this line shifts the number at position j one step to the right (to position j + 1), making room for current_number to move into the correct position.</p> <p>j -= 1</p> <p>We move j one step to the left to check the next item in the sorted portion of the list. This repeats until current_number finds the correct position.</p> <p>arr[j + 1] = current_number</p> <p>Once we\u2019ve found the correct spot for current_number, we place it there.</p> <p>return arr</p> <p>This line gives back the sorted list after we\u2019ve finished the sorting.</p>"},{"location":"SDD/4.6-Insertation-Sorts/#insertation-sort-2d-arrays","title":"Insertation Sort (2D Arrays)","text":"PythonExplanation <pre><code>average_temps = [ [\"January\", \"8\"],[\"February\", \"2\"],[\"March\", \"22\"],[\"April\", \"16\"],[\"May\", \"28\"]]\n\nfor i in range(1, len(average_temps)):\n\n    key = average_temps[i]\n\n    j = i - 1\n\n    while j &gt;= 0 and int(average_temps[j][1]) &lt; int(key[1]):\n\n        average_temps[j + 1] = average_tempss[j]\n\n        j -= 1\n\n        average_temps[j + 1] = key\n\nprint(\"Sorted Average Temps:\")\n\nprint(average_temps)\n</code></pre> <code>Line 1</code> <p>This is the list of temps we want to sort from smallest to biggest. </p> <code>Line 3</code> <p>This line tells the computer to look at the list one number at a time, starting from the second number (at position 1, because lists start at position 0). </p> <code>Line 4</code> <p>Here, the computer stores the temp. we\u2019re currently looking at. </p> <p>Remember, we start at position 1.</p> <code>Line 5</code> The computer looks at the temp that is before the one we are holding. <code>Line 7</code> <p>This line is very important as it checks two things:</p> <ol> <li> <p>Is there a temp before the current one?</p> <pre><code>    while j &gt;= 0\n</code></pre> </li> <li> <p>Is this temp smaller than the current temp? </p> <pre><code>    and int(average_temps[j][1] &lt; key[1]):\n</code></pre> </li> </ol> If both answers are yes, it means the current player should be placed before the one we\u2019re looking at.  <code>Line 11</code> <p>This moves the bigger number to the right.</p> <code>Line 13</code> <p>The computer now looks at the next number to the left.</p> <code>Line 13</code> <p>Finally, The computer, when we find the right place for our current number, we put it there.</p>"},{"location":"SDD/4.7-Class/","title":"Class","text":""},{"location":"SDD/4.7-Class/#explanation","title":"Explanation","text":"<p>Definition</p> <p>Code that defines what an object will remember and the things it will be able to do.</p> <p>A class is like a blueprint or a recipe.</p> <p>If you wanted to build a car, you wouldn't just randomly start putting things together. </p> <p>You would use a blueprint that shows them how to make the car, what parts it will have, and how it will work.</p> <p>A <code>class</code> is the blueprint (or set of instructions) that tells <code>Python</code> how to \"build\" a car in your program.</p>"},{"location":"SDD/4.7-Class/#properties","title":"Properties","text":"<p>Properties are the characteristics or features of an object that are defined in the class. </p> <p>In Python, these are typically set in the init method and accessed using the self keyword.</p> <p>Creating a Class with Properties</p> CodeExplanation <pre><code>    class Car:\n        def __init__(self, make, model, year): \n\n            self.make = make  \n            self.model = model \n            self.year = year \n</code></pre> <p><code>Line 1</code></p> <p>This defines a class called <code>Car</code>.</p> <p><code>line 2</code> - </p> <p>This line defines a special method called <code>__init__</code>.</p> <p>The <code>__init__</code> method is called automatically when you create a new object (a car) from the Car class.</p> <p>It is used to set up the initial properties (like make, model, and year) for that object.</p> <p><code>The parameters</code>:</p> <ul> <li> <p><code>self</code>: Refers to the object being created. It allows the method to work with the object's properties.</p> </li> <li> <p><code>make</code>: A placeholder for the car's manufacturer (e.g., \"Tesla\").</p> </li> <li> <p><code>model</code>: A placeholder for the car's model (e.g., \"Model 3\").</p> </li> <li> <p><code>year</code>: A placeholder for the car's manufacturing year (e.g., 2024).</p> </li> </ul> <p><code>Line 5</code></p> <p>This line creates a property called <code>make</code> for the car object and sets it to the value of the <code>make parameter</code> provided when the car is created.</p> <p><code>Line 6</code></p> <p>This line creates a property called <code>model</code> for the car object and sets it to the value of the <code>model parameter</code> provided when the car is created.</p> <p><code>Line 7</code></p> <p>This line creates a property called <code>year</code> for the car object and sets it to the value of the <code>year parameter</code> provided when the car is created.</p>"},{"location":"SDD/4.7-Class/#methods","title":"Methods","text":"<p>Using the Car class, methods are the actions or things that the car can do. </p> <p>These are like the instructions in the class that tell the car how to behave.</p> <p>Methods can be thought of as the abilities a car gets when it's created from the class blueprint.</p> <p>Adding the Methods</p> CodeExplanation <pre><code>    class Car:\n        def __init__(self, make, model, year): \n\n            self.make = make  \n            self.model = model \n            self.year = year\n\n        def start_engine(self):\n            print(f\"The {self.year} {self.make} {self.model} engine has started.\")\n\n        def stop_engine(self):  \n            print(f\"The {self.year} {self.make} {self.model} engine has stopped.\")\n</code></pre> <p><code>Line 1</code></p> <p>This defines a class called <code>Car</code>.</p> <p><code>line 2</code> - </p> <p>This line defines a special method called <code>__init__</code>.</p> <p>The <code>__init__</code> method is called automatically when you create a new object (a car) from the Car class.</p> <p>It is used to set up the initial properties (like make, model, and year) for that object.</p> <p><code>The parameters</code>:</p> <ul> <li> <p><code>self</code>: Refers to the object being created. It allows the method to work with the object's properties.</p> </li> <li> <p><code>make</code>: A placeholder for the car's manufacturer (e.g., \"Tesla\").</p> </li> <li> <p><code>model</code>: A placeholder for the car's model (e.g., \"Model 3\").</p> </li> <li> <p><code>year</code>: A placeholder for the car's manufacturing year (e.g., 2024).</p> </li> </ul> <p><code>Line 5</code></p> <p>This line creates a property called <code>make</code> for the car object and sets it to the value of the <code>make parameter</code> provided when the car is created.</p> <p><code>Line 6</code></p> <p>This line creates a property called <code>model</code> for the car object and sets it to the value of the <code>model parameter</code> provided when the car is created.</p> <p><code>Line 7</code></p> <p>This line creates a property called <code>year</code> for the car object and sets it to the value of the <code>year parameter</code> provided when the car is created.</p> <p><code>Line 8</code></p> <p>Define the <code>start_engine()</code> instance method that makes the car\u2019s engine start.</p> <p><code>Line 9</code></p> <p>The instance method prints a message saying the car's engine has <code>started</code> using the car\u2019s attributes (<code>make</code>, <code>model</code>, and <code>year</code>) to make the message specific to the car.</p> <p><code>How It Works</code></p> <p>When you call <code>start_engine()</code> on a car object, the self parameter refers to that specific car.</p> <p>It grabs the car\u2019s year, make, and model and includes them in the message.</p> <p><code>Line 11</code></p> <p>Define the <code>start_engine()</code>instance method that makes the car\u2019s engine start.</p> <p><code>Line 12</code></p> <p>The instance method prints a message saying the car's engine has <code>stopped</code> using the car\u2019s attributes (<code>make</code>, <code>model</code>, and <code>year</code>) to make the message specific to the car.</p>"},{"location":"SDD/4.8-Object-Oriented-Programming-Explanation/","title":"Object-Oriented Programming","text":""},{"location":"SDD/4.8-Object-Oriented-Programming-Explanation/#explanation","title":"Explanation","text":"<p>Object-oriented programming (OOP) is a programming language model organized around objects and data rather than logic.\u200b \u200b The first step in OOP is to identify all the objects the programmer wants to manipulate and how they relate to each other, an exercise often known as data modelling. \u200b \u200b Once an object has been identified,  it is generalized as a class of objects which defines the kind of data it contains and any logic sequences that can manipulate it. \u200b \u200b Each distinct logic sequence is known as a method. \u200b \u200b</p>"},{"location":"SDD/4.9-Objects/","title":"Objects","text":"<p>An object is a real thing created from a class.</p> <p>Each object has its own set of properties and can perform the actions (methods) defined by the class.</p> <p>When you create a car using the Car class, you\u2019re making a real instance of that class with specific details, like a car's make, model, and year. </p> <p>That instance is called an <code>object</code>.</p> <pre><code>class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    def start_engine(self):\n        print(f\"The {self.year} {self.make} {self.model} engine has started.\")\n\n    def stop_engine(self):\n        print(f\"The {self.year} {self.make} {self.model} engine has stopped.\")\n\n# Creating objects (specific cars)\ncar1 = Car(\"Tesla\", \"Model 3\", 2024)  # Object 1\ncar2 = Car(\"Toyota\", \"Corolla\", 2020) # Object 2\n\n# Using the objects\ncar1.start_engine()  # The 2024 Tesla Model 3 engine has started.\ncar2.start_engine()  # The 2020 Toyota Corolla engine has started.\n</code></pre>"},{"location":"SDD/5.1-SQLite-with-Python/","title":"SQLite with Python","text":""},{"location":"SDD/5.1-SQLite-with-Python/#step-1-setting-up","title":"Step 1: Setting Up","text":"<p>SQLite is included in Python by default, so you don\u2019t need to install anything extra.</p> <pre><code>import sqlite3\n</code></pre>"},{"location":"SDD/5.1-SQLite-with-Python/#step-2-connecting-to-a-database","title":"Step 2: Connecting to a Database","text":"<p>You need to establish a connection to an SQLite database. If the file doesn\u2019t exist, it will be created automatically.</p> <pre><code># Connect to (or create) a database\nconn = sqlite3.connect(\"my_database.db\")\n\n# Create a cursor object to interact with the database\ncursor = conn.cursor()\n</code></pre>"},{"location":"SDD/5.1-SQLite-with-Python/#step-3-creating-a-table","title":"Step 3: Creating a Table","text":"<p>Once connected, you can create tables using SQL.</p> <pre><code>cursor.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS students (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    age INTEGER,\n    grade TEXT\n)\n\"\"\")\nconn.commit()\n</code></pre> <p>Step 4: Inserting Data</p> <p>To add records to the table:</p> <pre><code>cursor.execute(\"INSERT INTO students (name, age, grade) VALUES (?, ?, ?)\", \n               (\"Alice\", 14, \"A\"))\nconn.commit()\n</code></pre> <p>For multiple records:</p> <pre><code>students = [(\"Bob\", 15, \"B\"), (\"Charlie\", 14, \"A\"), (\"David\", 16, \"C\")]\ncursor.executemany(\"INSERT INTO students (name, age, grade) VALUES (?, ?, ?)\", students)\nconn.commit()\n</code></pre> <p>Step 5: Retrieving Data</p> <p>To fetch data from the table:</p> <pre><code>cursor.execute(\"SELECT * FROM students\")\nrows = cursor.fetchall()\n\nfor row in rows:\n    print(row)\n</code></pre> <p>If you need just one record:</p> <pre><code>cursor.execute(\"SELECT * FROM students WHERE name = ?\", (\"Alice\",))\nprint(cursor.fetchone())  \n</code></pre>"},{"location":"SDD/5.1-SQLite-with-Python/#step-6-updating-data","title":"Step 6: Updating Data","text":"<p>You can update a record like this:</p> <pre><code>cursor.execute(\"UPDATE students SET grade = ? WHERE name = ?\", (\"A+\", \"Bob\"))\nconn.commit()\n</code></pre>"},{"location":"SDD/5.1-SQLite-with-Python/#step-7-deleting-data","title":"Step 7: Deleting Data","text":"<p>To remove a record:</p> <pre><code>cursor.execute(\"DELETE FROM students WHERE name = ?\", (\"Charlie\",))\nconn.commit()\n</code></pre>"},{"location":"SDD/5.1-SQLite-with-Python/#step-8-closing-the-connection","title":"Step 8: Closing the Connection","text":"<p>Always close the connection when done.</p> <pre><code>conn.close()\n</code></pre>"},{"location":"SDD/5.1-SQLite-with-Python/#storing-sqlite-data-in-parallel-arrays","title":"Storing SQLite Data in Parallel Arrays","text":"<pre><code>import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect(\"my_database.db\")\ncursor = conn.cursor()\n\n# Retrieve all data\ncursor.execute(\"SELECT * FROM students\")\nrows = cursor.fetchall()\n\n# Create parallel lists\nids = []\nnames = []\nages = []\ngrades = []\n\n# Loop through the rows and store data in separate lists\nfor row in rows:\n    ids.append(row[0])      # First column (id)\n    names.append(row[1])    # Second column (name)\n    ages.append(row[2])     # Third column (age)\n    grades.append(row[3])   # Fourth column (grade)\n\n# Close the connection\nconn.close()\n\n# Display the lists\nprint(\"IDs:\", ids)\nprint(\"Names:\", names)\nprint(\"Ages:\", ages)\nprint(\"Grades:\", grades)\n</code></pre>"},{"location":"SDD/5.1-SQLite-with-Python/#storing-sqlite-data-using-dataclasses","title":"Storing SQLite Data using Dataclasses","text":"<pre><code>from dataclasses import dataclass\nimport sqlite3\n\n# Define a dataclass\n@dataclass\nclass Student:\n    id: int\n    name: str\n    age: int\n    grade: str\n\n# Connect to the database\nconn = sqlite3.connect(\"my_database.db\")\ncursor = conn.cursor()\n\n# Retrieve all data\ncursor.execute(\"SELECT * FROM students\")\nrows = cursor.fetchall()\n\n# Store data in a list of dataclass objects\nrecords = [Student(*row) for row in rows]\n\n# Close the connection\nconn.close()\n\n# Display records\nfor record in records:\n    print(record)\n</code></pre>"}]}